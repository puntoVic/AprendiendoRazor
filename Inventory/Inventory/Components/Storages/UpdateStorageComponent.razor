@using Entities
@using Bussines

@inject NavigationManager NavManager

<EditForm Model="oStorage">
    <div class="form-group">
        <label>Referencia</label>
        <InputText @bind-Value="oStorage.StorageId" class="form-control" />
    </div>
    <div class="form-group">
        <label>Nombre del producto</label>
        <InputNumber @bind-Value="oStorage.PartialQuantity" class="form-control" />
    </div>

    <div class="form-group">
        <label>Producto:</label>
        <InputSelect @bind-Value="oStorage.ProductId" class="form-control">
            @foreach (var product in products)
            {
                <option value="@product.ProductId">@product.ProductName</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Bodega:</label>
        <InputSelect @bind-Value="oStorage.WarehouseId" class="form-control">
            @foreach (var warehouse in warehouses)
            {
                <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
            }
        </InputSelect>
    </div>
</EditForm>

@code {
    [Parameter]
    public string IdStorage { get; set; }
    StorageEntity oStorage = new StorageEntity();
    List<ProductEntity> products = new List<ProductEntity>();
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();

    protected override async Task OnInitializedAsync()
    {
        products = B_Product.ProductList();
        warehouses = B_Warehouse.WarehouseList();
        oStorage = B_Storage.StorageById(IdStorage);
    }
    private void UpdateProduct()
    {
        oStorage.LastUpdate = DateTime.Now;
        B_Storage.UpdateStorage(oStorage);
        NavManager.NavigateTo("storage/list");
    }
}
