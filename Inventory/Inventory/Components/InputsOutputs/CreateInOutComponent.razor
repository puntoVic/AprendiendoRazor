@using Entities
@using Bussines

@inject NavigationManager NavManager
<div>
    <div class="form-group">
        <select class="form-control" @onchange="OnChangeWarehouse">
            <option value="">Seleccione una bodega...</option>
            @foreach (var wh in warehouses)
            {
                <option value="@wh.WarehouseId">@wh.WarehouseName </option>
            }
        </select>
    </div>
    <hr />
    <EditForm Model="oInOut">
        <div class="form-group">
            <InputSelect class="form-control" @bind-Value="oInOut.StorageId">
                <option value="">Seleccione una producto...</option>
                @foreach (var storage in storages)
                {
                    <option value="@storage.StorageId">@storage.Product.ProductName </option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label>Fecha de movimiento</label>
            <InputDate @bind-Value="oInOut.InOutDate" class="form-control" />
        </div>
        <div class="form-group">
            <label>Cantidad</label>
            <InputNumber @bind-Value="oInOut.Quantity" class="form-control" />
        </div>
        <div class="form-group">
            <label>Entrada o salida</label>
            <InputCheckbox @bind-Value="oInOut.IsInput" class="form-control" />
        </div>

        <input type="button" value="@buttonValue" @onclick="SaveInOut" />
    </EditForm>
    <div class="text-center" h4>
        @message
    </div>
</div>
@code {
    InputOutputEntity oInOut = new InputOutputEntity();
    List<StorageEntity> storages = new List<StorageEntity>();
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();
    string buttonValue => oInOut.IsInput ? "Registrar entrada" : "Registrar Salida";
    string message;
    protected override async Task OnInitializedAsync()
    {
        warehouses = B_Warehouse.WarehouseList();

    }
    private void OnChangeWarehouse(ChangeEventArgs e)
    {
        var idWarehouse = e.Value.ToString();
        storages = B_Storage.StorageByWarehouseList(idWarehouse);
    }
    private void SaveInOut()
    {
        oStorage = storages.LastOrDefault(storages => storages.StorageId == oInOut.StorageId);
        oProduct = oStorage.Product;

        if (oInOut.IsInput)
        {
            oStorage.PartialQuantity = oStorage.PartialQuantity + oInOut.Quantity;
            B_Storage.UpdateStorage(oStorage);
            oProduct.TotalQuantity = oProduct.TotalQuantity + oInOut.Quantity;
            B_Product.UpdateProduct(oProduct);
            message = $"El producto {oProduct.ProductName} ha sido actualizado";
        }
        else
        {
            if (IsBiggerThanZero(oInOut.Quantity, oStorage.PartialQuantity))
            {
                oStorage.PartialQuantity = oStorage.PartialQuantity - oInOut.Quantity;
                B_Storage.UpdateStorage(oStorage);
                oProduct.TotalQuantity = oProduct.TotalQuantity - oInOut.Quantity;
                B_Product.UpdateProduct(oProduct);
                message = $"El producto {oProduct.ProductName} ha sido actualizado";
            }
            else
            {
                message = $" No existe la cantidad suficiente en bodega del producto {oProduct.ProductName} para retirar esa cantidad";
            }
        }

    }
    private bool IsBiggerThanZero(int quantity, int storageQuantity)
    {
        return storageQuantity > quantity;
    }
}
